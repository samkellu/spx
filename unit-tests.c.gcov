        -:    0:Source:tests/unit-tests.c
        -:    0:Graph:./unit-tests.gcno
        -:    0:Data:./unit-tests.gcda
        -:    0:Runs:2
        -:    1:#include <stdarg.h>
        -:    2:#include <stddef.h>
        -:    3:#include <stdint.h>
        -:    4:#include <setjmp.h>
        -:    5:#include "cmocka.h"
        -:    6:
        -:    7:#define TESTING
        -:    8:
        -:    9:#include "../spx_exchange.c"
        -:   10:
        2:   11:static void test_read_products_file_valid(void **state) {
        -:   12:
        -:   13:  char** result;
        2:   14:  char* expected[PRODUCT_LENGTH] = {
        -:   15:    "6","Burger","Burrito","Sandwich","Pie","Fish","Fruit"
        -:   16:  };
        -:   17:
        2:   18:  printf("\nDont know why my testcase messes with the stdout buffer but it does.\
        -:   19:  \nThis doesnt affect the output.\n\n");
        -:   20:
        2:   21:  result = read_products_file("tests/products_test.txt");
       16:   22:  for (int i = 0; i < 7; i++) {
       14:   23:    result[i] = strtok(result[i], "\r");
       14:   24:    assert_string_equal(expected[i], result[i]);
       14:   25:    free(result[i]);
        -:   26:  }
        2:   27:  free(result);
        2:   28:}
        -:   29:
        2:   30:static void test_read_products_file_not_exist(void **state) {
        -:   31:
        -:   32:  char** result;
        2:   33:  result = read_products_file("tests/products_not_exist.txt");
        2:   34:  assert_true(result == NULL);
        2:   35:}
        -:   36:
        2:   37:static void test_read_products_file_missing_lines(void **state) {
        -:   38:
        -:   39:  char** result;
        2:   40:  char* expected[PRODUCT_LENGTH] = {
        -:   41:    "6","Burger","Burrito","Sandwich","Pie","Fish","Fruit"
        -:   42:  };
        -:   43:
        2:   44:  result = read_products_file("tests/products_test_missing_lines.txt");
        -:   45:
       16:   46:  for (int i = 0; i < 7; i++) {
       14:   47:    result[i] = strtok(result[i], "\r");
       14:   48:    assert_string_equal(expected[i], result[i]);
       14:   49:    free(result[i]);
        -:   50:  }
        2:   51:  free(result);
        2:   52:}
        -:   53:
        2:   54:static void test_read_products_file_invalid_length(void **state) {
        -:   55:
        -:   56:  char** result;
        -:   57:
        2:   58:  result = read_products_file("tests/products_test_invalid_length.txt");
        -:   59:
        2:   60:  assert_true(result == NULL);
        2:   61:  free(result);
        2:   62:}
        -:   63:
        -:   64:
        -:   65:
        -:   66:
        2:   67:int main() {
        2:   68:  const struct CMUnitTest tests[] = {
        -:   69:    cmocka_unit_test_setup_teardown(test_read_products_file_valid, NULL, NULL),
        -:   70:    cmocka_unit_test_setup_teardown(test_read_products_file_not_exist, NULL, NULL),
        -:   71:    cmocka_unit_test_setup_teardown(test_read_products_file_missing_lines, NULL, NULL),
        -:   72:    cmocka_unit_test_setup_teardown(test_read_products_file_invalid_length, NULL, NULL),
        -:   73:
        -:   74:      };
        -:   75:
        2:   76:  return cmocka_run_group_tests(tests, NULL, NULL);
        -:   77:}
