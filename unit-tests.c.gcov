        -:    0:Source:tests/unit-tests.c
        -:    0:Graph:./unit-tests.gcno
        -:    0:Data:./unit-tests.gcda
        -:    0:Runs:1
        -:    1:#include <stdarg.h>
        -:    2:#include <stddef.h>
        -:    3:#include <stdint.h>
        -:    4:#include <setjmp.h>
        -:    5:#include "cmocka.h"
        -:    6:
        -:    7:#define TESTING
        -:    8:
        -:    9:#include "../spx_exchange.c"
        -:   10:
        -:   11:// Reads a valid product file
        1:   12:static void test_read_products_file_valid(void **state) {
        -:   13:
        -:   14:  char** result;
        1:   15:  char* expected[PRODUCT_LENGTH] = {
        -:   16:    "6","Burger","Burrito","Sandwich","Pie","Fish","Fruit"
        -:   17:  };
        -:   18:
        1:   19:  printf("\nDont know why my testcase messes with the stdout buffer but it does.\
        -:   20:  \nThis doesnt affect the output.\n\n");
        -:   21:
        1:   22:  result = read_products_file("tests/products_test.txt");
        8:   23:  for (int i = 0; i < 7; i++) {
        7:   24:    result[i] = strtok(result[i], "\r");
        7:   25:    assert_string_equal(expected[i], result[i]);
        7:   26:    free(result[i]);
        -:   27:  }
        1:   28:  free(result);
        1:   29:}
        -:   30:
        -:   31:// Reads a product file that doesnt exist
        1:   32:static void test_read_products_file_not_exist(void **state) {
        -:   33:
        -:   34:  char** result;
        1:   35:  result = read_products_file("tests/products_not_exist.txt");
        1:   36:  assert_true(result == NULL);
        1:   37:}
        -:   38:
        -:   39:// Reads a product file with missing lines
        1:   40:static void test_read_products_file_missing_lines(void **state) {
        -:   41:
        -:   42:  char** result;
        1:   43:  char* expected[PRODUCT_LENGTH] = {
        -:   44:    "6","Burger","Burrito","Sandwich","Pie","Fish","Fruit"
        -:   45:  };
        -:   46:
        1:   47:  result = read_products_file("tests/products_test_missing_lines.txt");
        -:   48:
        8:   49:  for (int i = 0; i < 7; i++) {
        7:   50:    result[i] = strtok(result[i], "\r");
        7:   51:    assert_string_equal(expected[i], result[i]);
        7:   52:    free(result[i]);
        -:   53:  }
        1:   54:  free(result);
        1:   55:}
        -:   56:
        -:   57:// Reads a product file with an invalid length
        1:   58:static void test_read_products_file_invalid_length(void **state) {
        -:   59:
        -:   60:  char** result;
        -:   61:
        1:   62:  result = read_products_file("tests/products_test_invalid_length.txt");
        -:   63:
        1:   64:  assert_true(result == NULL);
        1:   65:}
        -:   66:
        -:   67:// Creates a buy order and checks it is valid
        1:   68:static void test_create_buy_valid_no_match(void **state) {
        -:   69:
        1:   70:  struct trader* new_trader = malloc(sizeof(struct trader));
        1:   71:  new_trader->id = 0;
        1:   72:  new_trader->position_qty = calloc(sizeof(int), sizeof(int) * 2);
        1:   73:  new_trader->position_cost = calloc(sizeof(int), sizeof(int) * 2);
        1:   74:  new_trader->active = 1;
        1:   75:  new_trader->current_order_id = 0;
        1:   76:  new_trader->exchange_fd = 3;
        1:   77:  new_trader->trader_fd = 3;
        -:   78:
        1:   79:  struct order** orders = malloc(sizeof(struct order**));
        1:   80:  orders[0] = NULL;
        -:   81:
        1:   82:  struct trader* traders[] = {new_trader, NULL};
        1:   83:  char* products[] = {"2", "Burger", "Taco"};
        1:   84:  char product[PRODUCT_LENGTH] = "Burger";
        -:   85:
        -:   86:  struct order** result;
        1:   87:  result = create_order(BUY, products, new_trader, 0, product, 10, 11, &buy_order, orders, traders, 0);
        -:   88:
        1:   89:  assert_true(result[0] != NULL);
        1:   90:  assert_true(result[0]->type == BUY);
        1:   91:  assert_true(result[0]->order_id == 0);
        1:   92:  assert_true(result[0]->qty == 10);
        1:   93:  assert_true(result[0]->price == 11);
        1:   94:  assert_true(result[0]->trader == new_trader);
        1:   95:  assert_true(result[0]->time == 0);
        1:   96:  assert_true(strcmp(result[0]->product, "Burger") == 0);
        -:   97:
        1:   98:  free(new_trader->position_qty);
        1:   99:  free(new_trader->position_cost);
        1:  100:  free(new_trader);
        1:  101:  free(result[0]->product);
        1:  102:  free(result[0]);
        1:  103:  free(result);
        1:  104:}
        -:  105:
        -:  106:// Creates a sell order and checks it is valid
        1:  107:static void test_create_sell_valid_no_match(void **state) {
        -:  108:
        1:  109:  struct trader* new_trader = malloc(sizeof(struct trader));
        1:  110:  new_trader->id = 0;
        1:  111:  new_trader->position_qty = calloc(sizeof(int), sizeof(int) * 2);
        1:  112:  new_trader->position_cost = calloc(sizeof(int), sizeof(int) * 2);
        1:  113:  new_trader->active = 1;
        1:  114:  new_trader->current_order_id = 0;
        1:  115:  new_trader->exchange_fd = 3;
        1:  116:  new_trader->trader_fd = 3;
        -:  117:
        1:  118:  struct order** orders = malloc(sizeof(struct order**));
        1:  119:  orders[0] = NULL;
        -:  120:
        1:  121:  struct trader* traders[] = {new_trader, NULL};
        1:  122:  char* products[] = {"2", "Burger", "Taco"};
        1:  123:  char product[PRODUCT_LENGTH] = "Burger";
        -:  124:
        -:  125:  struct order** result;
        1:  126:  result = create_order(SELL, products, new_trader, 0, product, 10, 11, &sell_order, orders, traders, 0);
        -:  127:
        1:  128:  assert_true(result[0] != NULL);
        1:  129:  assert_true(result[0]->type == SELL);
        1:  130:  assert_true(result[0]->order_id == 0);
        1:  131:  assert_true(result[0]->qty == 10);
        1:  132:  assert_true(result[0]->price == 11);
        1:  133:  assert_true(result[0]->trader == new_trader);
        1:  134:  assert_true(result[0]->time == 0);
        1:  135:  assert_true(strcmp(result[0]->product, "Burger") == 0);
        -:  136:
        1:  137:  free(new_trader->position_qty);
        1:  138:  free(new_trader->position_cost);
        1:  139:  free(new_trader);
        1:  140:  free(result[0]->product);
        1:  141:  free(result[0]);
        1:  142:  free(result);
        1:  143:}
        -:  144:
        -:  145:// Tests the validity of a sell order, then matches it with a new buy order
        -:  146:// and checks that it is processed correctly
        1:  147:static void test_match_sell_buy_valid(void **state) {
        -:  148:
        1:  149:  struct trader* new_trader = malloc(sizeof(struct trader));
        1:  150:  new_trader->id = 0;
        1:  151:  new_trader->position_qty = calloc(sizeof(int), sizeof(int) * 2);
        1:  152:  new_trader->position_cost = calloc(sizeof(int), sizeof(int) * 2);
        1:  153:  new_trader->active = 1;
        1:  154:  new_trader->current_order_id = 0;
        1:  155:  new_trader->exchange_fd = 3;
        1:  156:  new_trader->trader_fd = 3;
        -:  157:
        1:  158:  struct trader* new_trader_2 = malloc(sizeof(struct trader));
        1:  159:  new_trader_2->id = 1;
        1:  160:  new_trader_2->position_qty = calloc(sizeof(int), sizeof(int) * 2);
        1:  161:  new_trader_2->position_cost = calloc(sizeof(int), sizeof(int) * 2);
        1:  162:  new_trader_2->active = 1;
        1:  163:  new_trader_2->current_order_id = 0;
        1:  164:  new_trader_2->exchange_fd = 3;
        1:  165:  new_trader_2->trader_fd = 3;
        -:  166:
        1:  167:  struct order** orders = malloc(sizeof(struct order**));
        1:  168:  orders[0] = NULL;
        -:  169:
        1:  170:  struct trader* traders[] = {new_trader, new_trader_2, NULL};
        1:  171:  char* products[] = {"2", "Burger", "Taco"};
        1:  172:  char product[PRODUCT_LENGTH] = "Burger";
        -:  173:
        1:  174:  orders = create_order(SELL, products, new_trader, 0, product, 10, 11, &sell_order, orders, traders, 0);
        -:  175:
        1:  176:  assert_true(orders[0] != NULL);
        1:  177:  assert_true(orders[0]->type == SELL);
        1:  178:  assert_true(orders[0]->order_id == 0);
        1:  179:  assert_true(orders[0]->qty == 10);
        1:  180:  assert_true(orders[0]->price == 11);
        1:  181:  assert_true(orders[0]->trader == new_trader);
        1:  182:  assert_true(orders[0]->time == 0);
        1:  183:  assert_true(strcmp(orders[0]->product, "Burger") == 0);
        -:  184:
        1:  185:  orders = create_order(BUY, products, new_trader_2, 0, product, 5, 12, &buy_order, orders, traders, 0);
        -:  186:
        1:  187:  assert_true(orders[1] == NULL);
        1:  188:  assert_true(orders[0] != NULL);
        1:  189:  assert_true(orders[0]->type == SELL);
        1:  190:  assert_true(orders[0]->order_id == 0);
        1:  191:  assert_true(orders[0]->qty == 5);
        1:  192:  assert_true(orders[0]->price == 11);
        1:  193:  assert_true(orders[0]->trader == new_trader);
        1:  194:  assert_true(orders[0]->time == 0);
        1:  195:  assert_true(strcmp(orders[0]->product, "Burger") == 0);
        1:  196:  assert_true(total_fees == 1);
        1:  197:  total_fees = 0;
        -:  198:
        1:  199:  int cursor = 0;
        3:  200:  while (traders[cursor] != NULL) {
        2:  201:    free(traders[cursor]->position_qty);
        2:  202:    free(traders[cursor]->position_cost);
        2:  203:    free(traders[cursor++]);
        -:  204:  }
        -:  205:
        1:  206:  cursor = 0;
        2:  207:  while (orders[cursor] != NULL) {
        1:  208:    free(orders[cursor]->product);
        1:  209:    free(orders[cursor++]);
        -:  210:  }
        1:  211:  free(orders);
        1:  212:}
        -:  213:
        -:  214:// Tests the validity of a buy order, then tests the validity of a sell order
        -:  215:// and checks that it is processed correctly
        1:  216:static void test_match_buy_sell_valid(void **state) {
        -:  217:
        1:  218:  struct trader* new_trader = malloc(sizeof(struct trader));
        1:  219:  new_trader->id = 0;
        1:  220:  new_trader->position_qty = calloc(sizeof(int), sizeof(int) * 2);
        1:  221:  new_trader->position_cost = calloc(sizeof(int), sizeof(int) * 2);
        1:  222:  new_trader->active = 1;
        1:  223:  new_trader->current_order_id = 0;
        1:  224:  new_trader->exchange_fd = 3;
        1:  225:  new_trader->trader_fd = 3;
        -:  226:
        1:  227:  struct trader* new_trader_2 = malloc(sizeof(struct trader));
        1:  228:  new_trader_2->id = 1;
        1:  229:  new_trader_2->position_qty = calloc(sizeof(int), sizeof(int) * 2);
        1:  230:  new_trader_2->position_cost = calloc(sizeof(int), sizeof(int) * 2);
        1:  231:  new_trader_2->active = 1;
        1:  232:  new_trader_2->current_order_id = 0;
        1:  233:  new_trader_2->exchange_fd = 3;
        1:  234:  new_trader_2->trader_fd = 3;
        -:  235:
        1:  236:  struct order** orders = malloc(sizeof(struct order**));
        1:  237:  orders[0] = NULL;
        -:  238:
        1:  239:  struct trader* traders[] = {new_trader, new_trader_2, NULL};
        1:  240:  char* products[] = {"2", "Burger", "Taco"};
        1:  241:  char product[PRODUCT_LENGTH] = "Burger";
        -:  242:
        1:  243:  orders = create_order(BUY, products, new_trader_2, 0, product, 10, 12, &buy_order, orders, traders, 0);
        -:  244:
        1:  245:  assert_true(orders[1] == NULL);
        1:  246:  assert_true(orders[0] != NULL);
        1:  247:  assert_true(orders[0]->type == BUY);
        1:  248:  assert_true(orders[0]->order_id == 0);
        1:  249:  assert_true(orders[0]->qty == 10);
        1:  250:  assert_true(orders[0]->price == 12);
        1:  251:  assert_true(orders[0]->trader == new_trader_2);
        1:  252:  assert_true(orders[0]->time == 0);
        1:  253:  assert_true(strcmp(orders[0]->product, "Burger") == 0);
        -:  254:
        1:  255:  orders = create_order(SELL, products, new_trader, 0, product, 5, 11, &sell_order, orders, traders, 0);
        -:  256:
        1:  257:  assert_true(orders[0] != NULL);
        1:  258:  assert_true(orders[0]->type == BUY);
        1:  259:  assert_true(orders[0]->order_id == 0);
        1:  260:  assert_true(orders[0]->qty == 5);
        1:  261:  assert_true(orders[0]->price == 12);
        1:  262:  assert_true(orders[0]->trader == new_trader_2);
        1:  263:  assert_true(orders[0]->time == 0);
        1:  264:  assert_true(strcmp(orders[0]->product, "Burger") == 0);
        1:  265:  assert_true(total_fees == 1);
        1:  266:  total_fees = 0;
        -:  267:
        1:  268:  int cursor = 0;
        3:  269:  while (traders[cursor] != NULL) {
        2:  270:    free(traders[cursor]->position_qty);
        2:  271:    free(traders[cursor]->position_cost);
        2:  272:    free(traders[cursor++]);
        -:  273:  }
        -:  274:
        1:  275:  cursor = 0;
        2:  276:  while (orders[cursor] != NULL) {
        1:  277:    free(orders[cursor]->product);
        1:  278:    free(orders[cursor++]);
        -:  279:  }
        1:  280:  free(orders);
        1:  281:}
        -:  282:
        -:  283:// Tests the validity of a buy order, then cancels it and makes sure
        -:  284:// it is cancelled correctly
        1:  285:static void test_cancel_valid(void **state) {
        -:  286:
        1:  287:  struct trader* new_trader = malloc(sizeof(struct trader));
        1:  288:  new_trader->id = 0;
        1:  289:  new_trader->position_qty = calloc(sizeof(int), sizeof(int) * 2);
        1:  290:  new_trader->position_cost = calloc(sizeof(int), sizeof(int) * 2);
        1:  291:  new_trader->active = 1;
        1:  292:  new_trader->current_order_id = 0;
        1:  293:  new_trader->exchange_fd = 3;
        1:  294:  new_trader->trader_fd = 3;
        -:  295:
        1:  296:  struct order** orders = malloc(sizeof(struct order**));
        1:  297:  orders[0] = NULL;
        -:  298:
        1:  299:  struct trader* traders[] = {new_trader, NULL};
        1:  300:  char* products[] = {"2", "Burger", "Taco"};
        1:  301:  char product[PRODUCT_LENGTH] = "Burger";
        1:  302:  char product2[PRODUCT_LENGTH] = "Taco";
        -:  303:
        1:  304:  orders = create_order(BUY, products, new_trader, 0, product, 10, 12, &buy_order, orders, traders, 0);
        1:  305:  orders = create_order(BUY, products, new_trader, 1, product2, 22, 333, &buy_order, orders, traders, 1);
        -:  306:
        1:  307:  assert_true(orders[2] == NULL);
        1:  308:  assert_true(orders[0] != NULL);
        1:  309:  assert_true(orders[0]->type == BUY);
        1:  310:  assert_true(orders[0]->order_id == 0);
        1:  311:  assert_true(orders[0]->qty == 10);
        1:  312:  assert_true(orders[0]->price == 12);
        1:  313:  assert_true(orders[0]->trader == new_trader);
        1:  314:  assert_true(orders[0]->time == 0);
        1:  315:  assert_true(strcmp(orders[0]->product, "Burger") == 0);
        -:  316:
        1:  317:  assert_true(orders[1] != NULL);
        1:  318:  assert_true(orders[1]->type == BUY);
        1:  319:  assert_true(orders[1]->order_id == 1);
        1:  320:  assert_true(orders[1]->qty == 22);
        1:  321:  assert_true(orders[1]->price == 333);
        1:  322:  assert_true(orders[1]->trader == new_trader);
        1:  323:  assert_true(orders[1]->time == 1);
        1:  324:  assert_true(strcmp(orders[1]->product, "Taco") == 0);
        -:  325:
        1:  326:  orders = create_order(CANCEL, products, new_trader, 0, NULL, 0, 0, &cancel_order, orders, traders, 2);
        -:  327:
        1:  328:  assert_true(orders[1] == NULL);
        1:  329:  assert_true(orders[0] != NULL);
        1:  330:  assert_true(total_fees == 0);
        1:  331:  total_fees = 0;
        -:  332:
        1:  333:  int cursor = 0;
        2:  334:  while (traders[cursor] != NULL) {
        1:  335:    free(traders[cursor]->position_qty);
        1:  336:    free(traders[cursor]->position_cost);
        1:  337:    free(traders[cursor++]);
        -:  338:  }
        -:  339:
        1:  340:  cursor = 0;
        2:  341:  while (orders[cursor] != NULL) {
        1:  342:    free(orders[cursor]->product);
        1:  343:    free(orders[cursor++]);
        -:  344:  }
        1:  345:  free(orders);
        1:  346:}
        -:  347:
        -:  348:// Tests the validity of a buy order, then amends it and makes sure
        -:  349:// it is amended correctly
        1:  350:static void test_amend_valid(void **state) {
        -:  351:
        1:  352:  struct trader* new_trader = malloc(sizeof(struct trader));
        1:  353:  new_trader->id = 0;
        1:  354:  new_trader->position_qty = calloc(sizeof(int), sizeof(int) * 2);
        1:  355:  new_trader->position_cost = calloc(sizeof(int), sizeof(int) * 2);
        1:  356:  new_trader->active = 1;
        1:  357:  new_trader->current_order_id = 0;
        1:  358:  new_trader->exchange_fd = 3;
        1:  359:  new_trader->trader_fd = 3;
        -:  360:
        1:  361:  struct order** orders = malloc(sizeof(struct order**));
        1:  362:  orders[0] = NULL;
        -:  363:
        1:  364:  struct trader* traders[] = {new_trader, NULL};
        1:  365:  char* products[] = {"2", "Burger", "Taco"};
        1:  366:  char product[PRODUCT_LENGTH] = "Burger";
        -:  367:
        1:  368:  orders = create_order(BUY, products, new_trader, 0, product, 10, 12, &buy_order, orders, traders, 0);
        -:  369:
        1:  370:  assert_true(orders[1] == NULL);
        1:  371:  assert_true(orders[0] != NULL);
        1:  372:  assert_true(orders[0]->type == BUY);
        1:  373:  assert_true(orders[0]->order_id == 0);
        1:  374:  assert_true(orders[0]->qty == 10);
        1:  375:  assert_true(orders[0]->price == 12);
        1:  376:  assert_true(orders[0]->trader == new_trader);
        1:  377:  assert_true(orders[0]->time == 0);
        1:  378:  assert_true(strcmp(orders[0]->product, "Burger") == 0);
        -:  379:
        1:  380:  orders = create_order(AMEND, products, new_trader, 0, NULL, 1, 22, &amend_order, orders, traders, 1);
        -:  381:
        1:  382:  assert_true(orders[1] == NULL);
        1:  383:  assert_true(orders[0] != NULL);
        1:  384:  assert_true(orders[0]->type == BUY);
        1:  385:  assert_true(orders[0]->order_id == 0);
        1:  386:  assert_true(orders[0]->qty == 1);
        1:  387:  assert_true(orders[0]->price == 22);
        1:  388:  assert_true(orders[0]->trader == new_trader);
        1:  389:  assert_true(orders[0]->time == 1);
        1:  390:  assert_true(strcmp(orders[0]->product, "Burger") == 0);
        1:  391:  assert_true(total_fees == 0);
        1:  392:  total_fees = 0;
        -:  393:
        1:  394:  int cursor = 0;
        2:  395:  while (traders[cursor] != NULL) {
        1:  396:    free(traders[cursor]->position_qty);
        1:  397:    free(traders[cursor]->position_cost);
        1:  398:    free(traders[cursor++]);
        -:  399:  }
        -:  400:
        1:  401:  cursor = 0;
        2:  402:  while (orders[cursor] != NULL) {
        1:  403:    free(orders[cursor]->product);
        1:  404:    free(orders[cursor++]);
        -:  405:  }
        1:  406:  free(orders);
        1:  407:}
        -:  408:
        -:  409:// Tests the validity of a buy order, then tests the validity of a sell order,
        -:  410:// amends the buy order such that the sell order is fulfilled
        1:  411:static void test_amend_match_valid(void **state) {
        -:  412:
        1:  413:  struct trader* new_trader = malloc(sizeof(struct trader));
        1:  414:  new_trader->id = 0;
        1:  415:  new_trader->position_qty = calloc(sizeof(int), sizeof(int) * 2);
        1:  416:  new_trader->position_cost = calloc(sizeof(int), sizeof(int) * 2);
        1:  417:  new_trader->active = 1;
        1:  418:  new_trader->current_order_id = 0;
        1:  419:  new_trader->exchange_fd = 3;
        1:  420:  new_trader->trader_fd = 3;
        -:  421:
        1:  422:  struct trader* new_trader_2 = malloc(sizeof(struct trader));
        1:  423:  new_trader_2->id = 1;
        1:  424:  new_trader_2->position_qty = calloc(sizeof(int), sizeof(int) * 2);
        1:  425:  new_trader_2->position_cost = calloc(sizeof(int), sizeof(int) * 2);
        1:  426:  new_trader_2->active = 1;
        1:  427:  new_trader_2->current_order_id = 0;
        1:  428:  new_trader_2->exchange_fd = 3;
        1:  429:  new_trader_2->exchange_fd = 3;
        -:  430:
        1:  431:  struct order** orders = malloc(sizeof(struct order**));
        1:  432:  orders[0] = NULL;
        -:  433:
        1:  434:  struct trader* traders[] = {new_trader, new_trader_2, NULL};
        1:  435:  char* products[] = {"2", "Burger", "Taco"};
        1:  436:  char product[PRODUCT_LENGTH] = "Burger";
        -:  437:
        1:  438:  orders = create_order(BUY, products, new_trader, 0, product, 10, 100, &buy_order, orders, traders, 0);
        -:  439:
        1:  440:  assert_true(orders[1] == NULL);
        1:  441:  assert_true(orders[0] != NULL);
        1:  442:  assert_true(orders[0]->type == BUY);
        1:  443:  assert_true(orders[0]->order_id == 0);
        1:  444:  assert_true(orders[0]->qty == 10);
        1:  445:  assert_true(orders[0]->price == 100);
        1:  446:  assert_true(orders[0]->trader == new_trader);
        1:  447:  assert_true(orders[0]->time == 0);
        1:  448:  assert_true(strcmp(orders[0]->product, "Burger") == 0);
        -:  449:
        1:  450:  orders = create_order(SELL, products, new_trader_2, 0, product, 2, 101, &sell_order, orders, traders, 1);
        -:  451:
        1:  452:  assert_true(orders[2] == NULL);
        1:  453:  assert_true(orders[1] != NULL);
        1:  454:  assert_true(orders[1]->type == SELL);
        1:  455:  assert_true(orders[1]->order_id == 0);
        1:  456:  assert_true(orders[1]->qty == 2);
        1:  457:  assert_true(orders[1]->price == 101);
        1:  458:  assert_true(orders[1]->trader == new_trader_2);
        1:  459:  assert_true(orders[1]->time == 1);
        1:  460:  assert_true(strcmp(orders[1]->product, "Burger") == 0);
        -:  461:
        1:  462:  orders = create_order(AMEND, products, new_trader, 0, NULL, 3, 101, &amend_order, orders, traders, 2);
        -:  463:
        1:  464:  assert_true(orders[1] == NULL);
        1:  465:  assert_true(orders[0] != NULL);
        1:  466:  assert_true(orders[0]->type == BUY);
        1:  467:  assert_true(orders[0]->order_id == 0);
        1:  468:  assert_true(orders[0]->qty == 1);
        1:  469:  assert_true(orders[0]->price == 101);
        1:  470:  assert_true(orders[0]->trader == new_trader);
        1:  471:  assert_true(orders[0]->time == 2);
        1:  472:  assert_true(strcmp(orders[0]->product, "Burger") == 0);
        1:  473:  assert_true(total_fees == 2);
        1:  474:  total_fees = 0;
        -:  475:
        1:  476:  int cursor = 0;
        3:  477:  while (traders[cursor] != NULL) {
        2:  478:    free(traders[cursor]->position_qty);
        2:  479:    free(traders[cursor]->position_cost);
        2:  480:    free(traders[cursor++]);
        -:  481:  }
        -:  482:
        1:  483:  cursor = 0;
        2:  484:  while (orders[cursor] != NULL) {
        1:  485:    free(orders[cursor]->product);
        1:  486:    free(orders[cursor++]);
        -:  487:  }
        1:  488:  free(orders);
        1:  489:}
        -:  490:
        1:  491:int main() {
        -:  492:
        1:  493:  const struct CMUnitTest tests[] = {
        -:  494:    cmocka_unit_test_setup_teardown(test_read_products_file_valid, NULL, NULL),
        -:  495:    cmocka_unit_test_setup_teardown(test_read_products_file_not_exist, NULL, NULL),
        -:  496:    cmocka_unit_test_setup_teardown(test_read_products_file_missing_lines, NULL, NULL),
        -:  497:    cmocka_unit_test_setup_teardown(test_read_products_file_invalid_length, NULL, NULL),
        -:  498:    cmocka_unit_test_setup_teardown(test_create_buy_valid_no_match, NULL, NULL),
        -:  499:    cmocka_unit_test_setup_teardown(test_create_sell_valid_no_match, NULL, NULL),
        -:  500:    cmocka_unit_test_setup_teardown(test_match_sell_buy_valid, NULL, NULL),
        -:  501:    cmocka_unit_test_setup_teardown(test_match_buy_sell_valid, NULL, NULL),
        -:  502:    cmocka_unit_test_setup_teardown(test_cancel_valid, NULL, NULL),
        -:  503:    cmocka_unit_test_setup_teardown(test_amend_valid, NULL, NULL),
        -:  504:    cmocka_unit_test_setup_teardown(test_amend_match_valid, NULL, NULL),
        -:  505:      };
        -:  506:
        1:  507:  return cmocka_run_group_tests(tests, NULL, NULL);
        -:  508:}
